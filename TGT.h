/*
The MIT License (MIT)

Copyright (c) 2014 Omar Azhar
Copyright (c) 2014 Jason Lee

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

Some basic code for Kerberos TGT
*/

#ifndef __KERBEROS_TGT__
#define __KERBEROS_TGT__

#include <iostream>

#include "../OpenPGP/OpenPGP.h"

class TGT{
    private:
        std::string user_id,            // "Alice"
                    session_key;        // generated by KDC
        uint64_t timestamp,             // now()
                 lifetime;              // timeskew

    public:
        TGT();
        TGT(const TGT & tgt);
        TGT(const std::string & tgt);   // read in formatted TGT string
        TGT(const std::string uid, const std::string & sk, const uint64_t & ts, const uint64_t & lt);

        // Modifiers
        void set_user_id(const std::string & uid);
        void set_session_key(const std::string & skey);
        void set_timestamp(const uint64_t & ts);
        void set_lifetime(const uint64_t & lt);

        // Accessors
        std::string get_user_id() const;
        std::string get_session_key() const;
        uint64_t get_timestamp() const;
        uint64_t get_lifetime() const;

        std::string str() const;        // formatted string
};

std::ostream & operator<<(std::ostream & stream, const TGT & tgt);

#endif